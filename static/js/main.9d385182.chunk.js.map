{"version":3,"sources":["components/log-in/log-in.tsx","components/chat-window/message.tsx","components/chat-window/form.tsx","components/chat-window/chat-window.tsx","components/users-sidebar/users-sidebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LogIn","isLoading","onLogin","className","disabled","onClick","Message","text","userName","date","moment","toNow","Form","messageValue","setMessageValue","onSendMessage","value","onChange","e","target","placeholder","type","id","ChatWindow","messages","onAddMessage","React","useState","messagesRef","useRef","useEffect","current","scrollTo","scrollHeight","ref","map","message","i","key","UsersSidebar","users","onLogOut","length","name","index","String","App","useContext","Context","auth","firestore","useAuthState","user","loading","error","useCollectionData","collection","orderBy","mLoading","mError","uLoading","uError","a","provider","firebase","GoogleAuthProvider","signInWithPopup","find","uid","add","displayName","signOut","FieldValue","serverTimestamp","JSON","stringify","validMessages","toDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createContext","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9d385182.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface IProps {\r\n  isLoading: boolean;\r\n  onLogin: () => void;\r\n}\r\n\r\nconst LogIn = ({ isLoading, onLogin }: IProps) => {\r\n  return (\r\n    <div className=\"log-in\">\r\n      <button disabled={isLoading} onClick={onLogin} className=\"log-in__button\">\r\n        {isLoading ? \"ВХОД...\" : \"Войти с помощью Google\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogIn;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nexport interface IProps {\r\n  text: string;\r\n  userName: string;\r\n  date: Date;\r\n};\r\n\r\nconst Message = ({ text, userName, date }: IProps) => {\r\n  return (\r\n    <div className=\"message\">\r\n      <p className=\"message__text\">{text}</p>\r\n      <div className=\"message__user-container\">\r\n        <span className=\"message__user-name\">{userName}</span>\r\n        <span className=\"message__user-name message__user-name--small\">\r\n          {moment(date).toNow()}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n  messageValue: string;\r\n  setMessageValue: (value: string) => void;\r\n  onSendMessage: () => void;\r\n};\r\n\r\nconst Form = ({ messageValue, setMessageValue, onSendMessage }: IProps) => {\r\n  return (\r\n    <form className=\"form\">\r\n      <input\r\n        value={messageValue}\r\n        onChange={(e) => setMessageValue(e.target.value)}\r\n        className=\"form__control\"\r\n        placeholder=\"Введите сообщение\"\r\n      />\r\n      <button\r\n        onClick={onSendMessage}\r\n        type=\"button\"\r\n        className=\"form__button\"\r\n        id=\"sent-button\"\r\n      >\r\n        Отправить\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nimport Message from \"./message\";\r\nimport Form from \"./form\";\r\n\r\nimport { IProps as IMessage } from \"./message\";\r\n\r\ninterface IAddMessage {\r\n  userName: string | null;\r\n  text: string;\r\n}\r\n\r\ninterface IProps {\r\n  messages?: IMessage[];\r\n  userName: string | null;\r\n  onAddMessage: ({ userName, text }: IAddMessage) => void;\r\n};\r\n\r\nconst ChatWindow = ({ messages, userName, onAddMessage }: IProps) => {\r\n  const [messageValue, setMessageValue] = React.useState(\"\");\r\n  const messagesRef = React.useRef<any>(null);\r\n\r\n  const onSendMessage = () => {\r\n    onAddMessage({ userName, text: messageValue });\r\n    setMessageValue(\"\");\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    messagesRef.current.scrollTo(0, messagesRef.current.scrollHeight);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-window__messages\">\r\n        <div ref={messagesRef} className=\"chat-window__messages-wrapper\">\r\n          {messages && messages.map((message, i) => (\r\n            <Message {...message} key={i} />\r\n          ))}\r\n        </div>\r\n        <Form\r\n          {...{\r\n            messageValue,\r\n            setMessageValue,\r\n            onSendMessage\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n  users: string[];\r\n  onLogOut: () => void;\r\n};\r\n\r\nconst UsersSidebar = ({ users, onLogOut }: IProps) => {\r\n  return (\r\n    <div className=\"users-sidebar\">\r\n      <h3>Всего ({users.length}):</h3>\r\n      <ul className=\"users-sidebar__list\">\r\n        {users.map((name, index) => (\r\n          <li className=\"users-sidebar__item\" key={name + String(index)}>{name}</li>\r\n        ))}\r\n      </ul>\r\n      <button className=\"users-sidebar__log-out\" onClick={onLogOut}>Выйти</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersSidebar;\r\n","import React from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nimport { LogIn, ChatWindow, UsersSidebar } from \"./components\";\r\nimport { Context } from \".\";\r\n\r\ninterface IMessage {\r\n  userName: string | null;\r\n  text: string;\r\n  date?: Date;\r\n};\r\n\r\nfunction App() {\r\n  const { auth, firestore } = React.useContext(Context);\r\n  const [ user, loading, error ] = useAuthState(auth);\r\n  const [ messages, mLoading, mError ] = useCollectionData(\r\n    firestore.collection(\"messages\").orderBy(\"date\")\r\n  );\r\n  const [ users, uLoading, uError ] = useCollectionData(\r\n    firestore.collection(\"users\").orderBy(\"uid\")\r\n  );\r\n\r\n  const onLogin = async () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    const { user } = await auth.signInWithPopup(provider);\r\n\r\n    if(users) {\r\n      if(!!!users.find(({ uid }) => user.uid === uid)) {\r\n        await firestore.collection(\"users\").add({ uid: user.uid, userName: user.displayName });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onLogOut = async () => {\r\n    await auth.signOut();\r\n  };\r\n\r\n  const onAddMessage = async ({ userName, text }: IMessage) => {\r\n    await firestore.collection(\"messages\").add({\r\n      userName,\r\n      text,\r\n      date: firebase.firestore.FieldValue.serverTimestamp()\r\n    });\r\n  };\r\n\r\n  if(error) {\r\n    return <div>{JSON.stringify(error)}</div>\r\n  }\r\n  if(mError) {\r\n    return <div>{JSON.stringify(error)}</div>\r\n  }\r\n  if(uError) {\r\n    return <div>{JSON.stringify(error)}</div>\r\n  }\r\n\r\n  const validMessages = messages\r\n    ? messages.map(({ userName, text, date }) => { return { userName, text, date: date && date.toDate() } })\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {!user || !messages || !users\r\n        ? <LogIn isLoading={loading || mLoading || uLoading} onLogin={onLogin} />\r\n        : <div className=\"chat\">\r\n          <ChatWindow\r\n            messages={validMessages}\r\n            userName={user.displayName}\r\n            onAddMessage={onAddMessage}\r\n          />\r\n          <UsersSidebar onLogOut={onLogOut} users={users?.map(({ userName }) => userName) || []} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { createContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./import.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAIyPyky-SUBZFnsOO5xcL7Ym0zOeqRZYg\",\r\n  authDomain: \"react-simple-chat-e20d8.firebaseapp.com\",\r\n  databaseURL: \"https://react-simple-chat-e20d8-default-rtdb.firebaseio.com\",\r\n  projectId: \"react-simple-chat-e20d8\",\r\n  storageBucket: \"react-simple-chat-e20d8.appspot.com\",\r\n  messagingSenderId: \"427434539112\",\r\n  appId: \"1:427434539112:web:957e56e253ac220dd2e3dd\",\r\n  measurementId: \"G-M74BJ46886\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const Context = createContext<any>(null);\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Context.Provider value={{\r\n      firebase,\r\n      auth,\r\n      firestore\r\n    }}>\r\n      <App />\r\n    </Context.Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}